<script lang="ts">
    import type { PageData } from "./$types";
    import { page } from "$app/stores";
    import type { IndexMonster } from "./+page";
    import { generations } from "./generations";
    import { goto } from "$app/navigation";
    import Monster from "./Monster.svelte";
    export let data: PageData;

    $: monsterId = $page.url.searchParams.get('monsterId') || '';
    $: monster = data.monsters.find((entry) => entry.id === monsterId);

    $: monsterId2 = $page.url.searchParams.get("monsterId2") || '';
    $: monster2 = data.monsters.find((entry) => entry.id === monsterId2);
    const updateSearchParams = (key: string, value: string) => {
        const searchParams = new URLSearchParams($page.url.searchParams);
        searchParams.set(key, value);
        goto(`?${searchParams.toString()}`);
        };

    $: console.log($page.url.searchParams.get('monsterId'))
    let name = 'tutu';
</script>

{#if monster}
<Monster monster={monster} />
{/if}

{#if monster2}
<Monster monster={monster2} />
{/if}






<div class="generations">
{#each generations as generation (generation.id)}
    <div class='generation'>{generation.main_region}</div>
{/each}
</div>


<div class="monsters">
{#each data.monsters as monster (monster.id)}
<!-- svelte-ignore a11y-click-events-have-key-events -->
<!-- svelte-ignore a11y-no-static-element-interactions -->
<div class="monster">
    <div on:click={() => updateSearchParams('monsterId', monster.id)}>
        <div class="monster-content">
            <img src={monster.image} alt={monster.name} />
            {monster.name}
        </div>
        <div class="monster-id">
            {monster.id}
        </div>
        </div>
        <div on:click={() => updateSearchParams('monsterId2', monster.id)}>
            Add Monster 2
        </div>
    </div>
{/each}
</div>


<style>
    .generations {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
    }

    .generation {
        margin: 10px;
        padding: 5px 10px;
        border: 1px solid black;
        background-color: #f9f9f9;
        color: #333;
    }
    .generation:hover {
        background-color: #eee;
    }

    .monsters {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
    }

    .monster {
        width: 100px;
        /* border: 1px solid black; */
        margin: 10px;
        padding: 10px;
        position: relative;
        background-color: #eee;
    }
    .monster:hover {
        background-color: #ddd;
    }
    .monster-id {
        position: absolute;
        top: 8px;
        left: 8px;
        font-size: 0.8em;
        color: #aaa;

    }

    .monster-content {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
</style>





